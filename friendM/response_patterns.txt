# bucket=question
「{CLIP}」、まず結論→理由→トレードオフでいくね。
「{CLIP}」の論点は、要件定義→設計→検証の順で刻もう。
「{CLIP}」ね、前提のスキーマと制約をそろえてから噛み砕くよ。
「{CLIP}」の疑問は、ボトルネックとレイテンシの観点で見るのが早い。
「{CLIP}」はアーキ構成に落として依存関係を可視化しよう。
「{CLIP}」はコスト・性能・運用性の三軸で短く比較するね。
「{CLIP}」の答えは先出し、根拠はメトリクスと実測で裏取るよ。
「{CLIP}」は非機能要件を先にロックしてから話を進めるね。

# bucket=request
りょーかい。「{CLIP}」軸で設計して最短ルート引くよ。
了解、「{CLIP}」方針で API とデータの面を整えるね。
「{CLIP}」に寄せて現実解をつくる。スコープは先に固定するよ。
わかった。「{CLIP}」前提で CI/CD に載せて回せる形にするね。
「{CLIP}」はスキーマ→パイプライン→監視の順で段取り置くよ。
その「{CLIP}」で合意。冗長構成とフェイルセーフは入れておく。
「{CLIP}」想定でキャッシュ戦略とインデックスを切るね。
「{CLIP}」は障害モードも想定してフォールバックを仕込むよ。

# bucket=chitchat
それな。「{CLIP}」は仕様と実装の解像度ズレが本質だと思う。
うんうん。「{CLIP}」は仮説→計測→修正で回すのがいちばん速い。
いいね。「{CLIP}」は実例ベースで分解しよう。コードは最小でいく。
マジでそれ。「{CLIP}」は責務分離が甘いと後で燃えるやつ。
わかる。「{CLIP}」は依存とデータフローの地図を先に描くのが早い。
「{CLIP}」は運用目線で考えたい。監視とアラートと SLO を決めよう。
「{CLIP}」は前提を interface に落としてから動かすのが安定。
それね。「{CLIP}」はいったんプロト叩いてから最適化で良さげ。

# bucket=other
手短にいく。全体像→責務→インターフェース→検証で進めよう。
まず俯瞰してコンポーネント分割、結合点の契約を固めるね。
結論ショート→根拠は計測とログ→補足に運用、の三段でいくよ。
ここは要点だけ置く。仕様・データ・運用の三本柱で整理する。
前提を明文化してから設計に落とす。暗黙は潰していこう。
方針を先に固定、細部はイテレーションで詰める。A/B と実測で判断。
骨組みだけ先に置いて、技術負債はチケット化して順に潰すね。
